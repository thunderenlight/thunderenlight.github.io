<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>ThunderEnlight DBC</title>
        <description>ThunderEnlight DBC - K Glenn</description>
        <link>http://thunderenlight.github.io</link>
        <link>http://thunderenlight.github.io</link>
        <lastBuildDate>2016-04-20T17:03:08-05:00</lastBuildDate>
        <pubDate>2016-04-20T17:03:08-05:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Asking Good Questions</title>
                <description>
&lt;p&gt;&lt;img src=&quot;/assets/imgs/lil_mount.jpg&quot; alt=&quot;My dbc climb&quot; /&gt;
&lt;img src=&quot;/assets/imgs/journey.png&quot; alt=&quot;My dbc journey&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;asking-good-questions&quot;&gt;Asking Good Questions&lt;/h3&gt;

&lt;p&gt;It’s very important test questions specially the ones that you think are down and make you look stupid intention to ask those questions and to predicate my success on my ability to open myself up and asked for help and always be getting help and always be making room for of advice and help and tips and all different places especially human resources that I have on site. I plan to intentionally start off with in the right foot by asking for help for things that I don’t even know I need help for help concerning a plan and I will and I pledge to ask as many questions and be the squeaky wheel and I plan to not be shy and withdraw when confused when stumbling when those knees are scuffed head is dizzy and heart is heavy with the lack this lab is one of self discovery and self occupation and I will reach out and question everything and accept my condition and capacity whilst being open thinker and actor in my evolution.&lt;/p&gt;
</description>
                <link>http://thunderenlight.github.io/cultural/dbc/2015/04/03/c9-questions</link>
                <guid>http://thunderenlight.github.io/cultural/dbc/2015/04/03/c9-questions</guid>
                <pubDate>2015-04-03T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Tech Blog</title>
                <description>
</description>
                <link>http://thunderenlight.github.io/2015/04/02/tech-blog</link>
                <guid>http://thunderenlight.github.io/2015/04/02/tech-blog</guid>
                <pubDate>2015-04-02T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Hello World</title>
                <description>
</description>
                <link>http://thunderenlight.github.io/2015/03/31/hello-world</link>
                <guid>http://thunderenlight.github.io/2015/03/31/hello-world</guid>
                <pubDate>2015-03-31T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Welcome to DBC</title>
                <description>&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GroceryList&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Item Removed!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_list&lt;/span&gt;
         &lt;span class=&quot;vi&quot;&gt;@list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;we need &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
                <link>http://thunderenlight.github.io/dbc/2015/03/20/welcome-to-dbc</link>
                <guid>http://thunderenlight.github.io/dbc/2015/03/20/welcome-to-dbc</guid>
                <pubDate>2015-03-20T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>Css Design</title>
                <description>&lt;p&gt;&lt;img src=&quot;/assets/imgs/lil_mount.jpg&quot; alt=&quot;My dbc climb&quot; /&gt;
&lt;img src=&quot;/assets/imgs/journey.png&quot; alt=&quot;My dbc journey&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-does-it-mean-to-display-inline-vs-inline-blocks&quot;&gt;What does it mean to display inline vs inline blocks?&lt;/h3&gt;

&lt;!-- &lt;img  class=&quot;display&quot;style=&quot;width 300px&quot; src=&quot;../imgs/inline_block.png&quot;&gt;&lt;img  class=&quot;display&quot;style=&quot;width 300px&quot; src=&quot;../imgs/inline.png&quot;&gt;
 --&gt;
&lt;p&gt;I wanted to discuss the differences between the display inline vs. inline block because it was one of the hardest for me to grasp. So the firstp&amp;gt;The &lt;code&gt;display&lt;/code&gt; CSS property specifies the type of rendering box used for an element. In HTML, default &lt;code&gt;display&lt;/code&gt; property values are taken from behaviors described in the HTML specifications or from the browser/user default stylesheet. The default value in XML is &lt;code&gt;inline&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition to the many different display box types, the value &lt;code&gt;none&lt;/code&gt; lets you turn off the display of an element; when you use &lt;code&gt;none&lt;/code&gt;, all descendant elements also have their display turned off. The document is rendered as though the element doesn&#39;t exist in the document tree.
		&lt;p&gt;&lt;li&gt;&lt;strong&gt;inline&lt;/strong&gt; - An inline box will be produced by the element. Inline box elements are not proceeded or followed by line breaks and they occupy only the width that they need.&lt;/li&gt;
  		&lt;li&gt;&lt;strong&gt;block&lt;/strong&gt; - A block box will be produced by the element. Block box elements are proceeded and followed by line breaks. Block box elements occupy the full available width unless their widths are specifically set.&lt;/li&gt;
  		&lt;li&gt;&lt;strong&gt;list-item&lt;/strong&gt; - The element will be displayed as a list-item element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;inline-block&lt;/strong&gt; - A combination block and inline box is produced by the element. The element will be laid out as if it were an inline box. However, the element functions as a block container to its contents. The width of the element&#39;s box can be set.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;table&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/table_tag/&quot;&gt;&amp;lt;table&amp;gt;&lt;/a&gt; element formatted as a block element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;inline-table&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/table_tag/&quot;&gt;&amp;lt;table&amp;gt;&lt;/a&gt; element formatted as an inline element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;table-row-group&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/tbody_tag/&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/a&gt; element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;table-header-group&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/thead_tag/&quot;&gt;&amp;lt;thead&amp;gt;&lt;/a&gt; element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;table-footer-group&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/tfoot_tag/&quot;&gt;&amp;lt;tfoot&amp;gt;&lt;/a&gt; element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;table-row&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/tr_tag/&quot;&gt;&amp;lt;tr&amp;gt;&lt;/a&gt; element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;table-column-group&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/colgroup_tag/&quot;&gt;&amp;lt;colgroup&amp;gt;&lt;/a&gt; element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;table-column&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/col_tag/&quot;&gt;&amp;lt;col&amp;gt;&lt;/a&gt; element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;table-cell&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/td_tag/&quot;&gt;&amp;lt;td&amp;gt;&lt;/a&gt; and &lt;a href=&quot;/html/th_tag/&quot;&gt;&amp;lt;th&amp;gt;&lt;/a&gt; elements.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;table-caption&lt;/strong&gt; - The element functions like the HTML &lt;a href=&quot;/html/caption_tag/&quot;&gt;&amp;lt;caption&amp;gt;&lt;/a&gt; element.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;none&lt;/strong&gt; - The element is prevented from being displayed. No box will be produced.&lt;/li&gt;
	  &lt;li&gt;&lt;strong&gt;inherit&lt;/strong&gt; - The &lt;strong&gt;inherit&lt;/strong&gt; keyword is used to specify that the value for this property should be taken from the parent element. If &lt;strong&gt;inherit&lt;/strong&gt; is used with the root element, then the initial value for this property will be used.&lt;/li&gt;

		Web browsers render different elements in different ways. Some elements are block-level, meaning that their default display value is set to block. Block-level elements have a definable width and height and automatically create a new row in the layout as they’re created.One example of a block-level element is a paragraph.

		
&lt;/p&gt;&lt;/p&gt;
</description>
                <link>http://thunderenlight.github.io/technical/dbc/2015/02/02/t2-css-design</link>
                <guid>http://thunderenlight.github.io/technical/dbc/2015/02/02/t2-css-design</guid>
                <pubDate>2015-02-02T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Compare Websites</title>
                <description>&lt;p&gt;&lt;img src=&quot;/assets/imgs/lil_mount.jpg&quot; alt=&quot;My dbc climb&quot; /&gt;
&lt;img src=&quot;/assets/imgs/journey.png&quot; alt=&quot;My dbc journey&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;three-of-my-favorite-websites&quot;&gt;Three of My Favorite Websites&lt;/h3&gt;

&lt;p&gt;I consider &lt;a href=&quot;http://www.amazon.com/&quot;&gt; Amazon.com &lt;/a&gt; is one of my favorite sites. Especially if  actual time spent using it .I think that when you eye hits to the homepage, it is drawn to whatever the highlighted featured of the moment is. This changes frequently so there is alot movement. Elements which constantly change help captivate, so when I stand further back I can see the previous items that I’ve looked at and I can get a good visual history of my previous browsing. I would describe this website visually as well branded, and organized but not cluttered. Easily accessible information with layered information and media types. The problem that this website solves is it’s a one-stop online shopping experience giving me great reviews and opportunities to discover new products at prices that are much better than shopping in my neighborhood and without having to pay tax. It is easy to find what I’m looking for from my homepage. Because of its well documented database it’s even easy to find through Google everything is accessible from any given page. You can even buy a cloud server and virtual hostspace there.&lt;/p&gt;

&lt;p&gt;No matter how deep I go into the site or into reviews or into completely different areas the homepage is always accessible. After I’ve been at the site for a while I feel like I can keep surfing because they have media and other areas that are completely unrelated to shopping or for any other ofthe reasons why I came to the page in the first place.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width 500px; height: 500px;&quot; src=&quot;../imgs/popurls.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The reason why I frequent &lt;a href=&quot;http://popurls.com/&quot;&gt;pop URLs&lt;/a&gt; , and because it&#39;s one of my favorites is due to its well organnized list of other popular websites and it gives me a good idea and was popular and current.  The first thing that draws my in to the site is the headline links and also the Flickr links. Links on this website are distributed and displayed in order and reported by popularity, therfore normally drawing your eye from the top to the bottom you can see different popular links in order of popularity which gives a nice distributed feeling and spread.  athere are pictures and videos posted/linked that also draw the eye.  
&lt;br /&gt;
&lt;em&gt;&quot;welcome to popurls - if you&#39;d like to use personalized features, such as story recommendations or sharing, please login to the popurls network&quot;.&lt;/em&gt;
It does seem to be a bit cluttered, but the minimalist style of the links in the three columns layout makes it less overwhelming to peruse. I would say that it&#39;s aspirational, entertaing me, engaging and offering a wide format of contextual links. One of the good things about that is that I don&#39;t stay on it too long because it is a site links it&#39;s very easy to go off onto another site and continue browsing and have a path that may or may not be back to the site system. It&#39;s a very good launching point site and gives me confidence that I&#39;m getting a good cross-section of current websites at once.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;width 500px; height: 500px;&quot; src=&quot;../imgs/lifehacker.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I really enjoy &lt;a href=&quot;http://lifehacker.com/&quot;&gt;lifehacker.com&lt;/a&gt; because it&#39;s rather involved and it covers many concerns and areas of interest and it still feels technology-based. The site often feels like a collaborative blog and the featured article draws my eye while at the homepage. As you look further it is the logo and the featured article that focuses.
	
		There&#39;s always a current stream of news, article, and popular stories like a community blog. I would describe it visually as streamlined online newspaper thats also practical informative with engaging quality content.
		Sometimes it is difficult to sift through because the information is constantly changing it is difficult to find what you&#39;re looking for in the search input. Search process can be flawed it goes back many many years and there is quite a breadth of information so sometimes it is hard to find obscure posts, if the query is not fairly new.
		After being on the website for a while I feel happy and inspired I feel like I&#39;ve gotten a lot of information not really feel like I&#39;ve wasted any time, or I haven&#39;t learned anything even accidentally. Although they don&#39;t necessarily sell anything but their partner site provide links for current deals and  DIY opportunities.
 
&lt;/p&gt;
</description>
                <link>http://thunderenlight.github.io/technical/dbc/2015/02/02/t1-compare-websites</link>
                <guid>http://thunderenlight.github.io/technical/dbc/2015/02/02/t1-compare-websites</guid>
                <pubDate>2015-02-02T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Chefs Kitchen</title>
                <description>&lt;p&gt;&lt;img src=&quot;/assets/imgs/lil_mount.jpg&quot; alt=&quot;My dbc climb&quot; /&gt;
&lt;img src=&quot;/assets/imgs/journey.png&quot; alt=&quot;My dbc journey&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After watching the &lt;a href=&quot;&amp;quot;http://vimeo.com/85001014&quot; title=&quot;Firechat Video&quot;&gt;video&lt;/a&gt; I did have nightmares, with coldsweats included. I feel it is going to be just that: wholistic Boot Camp for my mind and for my heart (porbably my back will feel it even more). I think I see myself engaging in a second nature way and kind of going back-and-forth between the kitchen mentality in the table mentality hopefully I can remember to be more proactive and stay in the kitchen and remain less transactional. Sadly, it is an easy trap to fall into specially in a stressful situation and being amongst strangers whose expectations of  DEVC may or may not have changed. I feel like it’s going to be even harder than I can imagine and I’m completely unnerved.I wonder if it’s more of a psychological experiment and if I can hold strong under it and if I can take it in stride as a learning experience and journey not so much about ruby but about myself.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/fireside.png&quot; alt=&quot;Shereef&#39;s Fireside Chat Reflection&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	I get the sense that just like a Boot Camp for soldiers this is actually like preparation for career war or that it is kind of a war within psychologically and mentally and of course with preconceived notions. So hopefully training for real world battles challenges andcompany interviews at least the jobseeking process in general &amp;gt;The Video I love also as it addtesses work and pairing and true feedback muliplied by the idea of sharing the burden of those solve the challenges and also solidifying the individuals knowledge so they may combine  efforts and energies. Yeah I watch alot of cartoons andanime . This video leaves me hoping I have a hidden super power. It also reminds me to reach out and be open about my lack of knowledge and how it can concern and help and not just hinders.
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://thunderenlight.github.io/cultural/dbc/2015/02/01/c1-chefs-kitchen</link>
                <guid>http://thunderenlight.github.io/cultural/dbc/2015/02/01/c1-chefs-kitchen</guid>
                <pubDate>2015-02-01T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website.
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</description>
                <link>http://thunderenlight.github.io/lessons/2011/12/29/jekyll-introduction</link>
                <guid>http://thunderenlight.github.io/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00-06:00</pubDate>
        </item>


</channel>
</rss>
